package mil.af.rl.jcat.gui.table.model.base;import java.util.*;import mil.af.rl.jcat.plan.Event;import mil.af.rl.jcat.processlibrary.Library;import mil.af.rl.jcat.processlibrary.SignalType;import mil.af.rl.jcat.processlibrary.Signal;import mil.af.rl.jcat.processlibrary.Process;import mil.af.rl.jcat.util.*;/** * <p>Title: JPGroup.java</p> * <p>Description: Represents a group of signals comprising a group inside *                 a probability table model.</p> * <p>Copyright: Copyright (c) 2004</p> * <p>Company: C3I Associates </p> * @author Edward Vereich * @version 1.0 */public class JPGroup{	private String name;	private List<Signal> signals = new LinkedList<Signal>();	//private List<Guid> guids = new LinkedList<Guid>();	private float probability = -1.0f;	private Event event = null;	public JPGroup(String gname, Event evnt)	{		name = gname;		event = evnt;	}	public JPGroup(String gname, List<Signal> sigs, Event evnt)	{		this(gname, evnt);		signals.addAll(sigs);	}	public JPGroup(String gname, float prob, Event evnt)	{		this(gname, evnt);		probability = prob;	}	public JPGroup(String name, List<Signal> sigs, Event evnt, float prob)	{		this(name, sigs, evnt);		probability = prob;	}	/**	 * Method adds a signal to the group	 * @param signal Signal signal object	 */	public void addSignal(Signal signal)	{		signals.add(signal);		//guids.add(signal.getSignalID());	}	public void removeAllSignals()	{		signals.clear();		//		guids.clear();	}	public void removeSignal(Signal signal)	{		signals.remove(signal);	}	public List<Guid> getSignalGuids()	{		Vector<Guid> sigGuids = new Vector<Guid>();		Iterator sigs = signals.iterator();		while(sigs.hasNext())			sigGuids.add(((Signal) sigs.next()).getSignalID());		return sigGuids;		//return guids;	}	/**	 * Method adds a signal to the group	 * @param sguid Guid signal guid	 */	public void addSignal(Guid sguid, Library lib)	{		signals.add(lib.getSignal(sguid));		//		guids.add(sguid);  	}	public void setName(String gname)	{		name = gname;	}	public void setProbability(float prob)	{		probability = prob;	}	public String getName()	{		return name;	}	public List getSignals()	{		return signals;	}	public float getProbability(Library lib)	{		if(probability == -1.0f)		{			Process proc = lib.getProcess(event.getProcessGuid());			return proc.getDefault(SignalType.GROUP);		}		else			return probability;	}	public String toString()	{		return name;	};	public boolean equals(Object grp)	{		if(!(grp instanceof JPGroup))			return false;		JPGroup group = (JPGroup) grp;		if(group.getSignals().size() > signals.size()) //wtf.. if this condition passes this will always return false wont it?		{			Iterator gi = group.getSignals().iterator();			for(; gi.hasNext();)			{				if(signals.contains(gi.next()))					continue;				else				{					return false;				}			}			return true;		}		else		{			Iterator gi = signals.iterator();			for(; gi.hasNext();)			{				if(group.getSignals().contains(gi.next()))					continue;				else				{					return false;				}			}			return true;		}	}}